"use strict";(self.webpackChunkwaxdevelopers=self.webpackChunkwaxdevelopers||[]).push([[2758],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),g=a,m=p["".concat(s,".").concat(g)]||p[g]||d[g]||r;return t?o.createElement(m,l(l({ref:n},u),{},{components:t})):o.createElement(m,l({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<r;c++)l[c]=t[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},6209:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=t(7462),a=(t(7294),t(3905));const r={title:"WaxJS Demo",layout:"default",parent:"WaxJS Overview",grand_parent:"WAX Cloud Wallet","lang-ref":"WaxJS Demo",lang:"en"},l=void 0,i={unversionedId:"wax-cloud-wallet/waxjs/waxjs_demo",id:"wax-cloud-wallet/waxjs/waxjs_demo",title:"WaxJS Demo",description:"Below is a basic example of WaxJS functionality. To use this demo, click WAX Login (if you're not automatically logged in), then click Sign Transaction.",source:"@site/docs/wax-cloud-wallet/waxjs/waxjs_demo.md",sourceDirName:"wax-cloud-wallet/waxjs",slug:"/wax-cloud-wallet/waxjs/waxjs_demo",permalink:"/waxdevelopers_test/docs/wax-cloud-wallet/waxjs/waxjs_demo",draft:!1,editUrl:"https://github.com/3dkrender/waxdeveloper_test/tree/main/docs/wax-cloud-wallet/waxjs/waxjs_demo.md",tags:[],version:"current",frontMatter:{title:"WaxJS Demo",layout:"default",parent:"WaxJS Overview",grand_parent:"WAX Cloud Wallet","lang-ref":"WaxJS Demo",lang:"en"},sidebar:"tutorialSidebar",previous:{title:"WaxJS Overview",permalink:"/waxdevelopers_test/docs/wax-cloud-wallet/waxjs/"},next:{title:"Install WaxJS",permalink:"/waxdevelopers_test/docs/wax-cloud-wallet/waxjs/waxjs_install"}},s={},c=[{value:"Code Examples",id:"code-examples",level:2}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Below is a basic example of WaxJS functionality. To use this demo, click WAX Login (if you're not automatically logged in), then click Sign Transaction."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Auto-login Feature")),(0,a.kt)("p",null,"If your blockchain information displays below, you're automatically logged in to WaxJS, and you don't need to click WAX Login. This eliminates the need for multiple clicks and popups!"),(0,a.kt)("p",{style:{color:"#ef9d47"},id:"autologin"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WAX Login")),(0,a.kt)("p",null,"Use this if you're not automatically logged in. Note that if you are auto-logged in, clicking this does not open a popup and the userAccount is still returned."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<button class="text-md mt-4 border-black border-solid border-2 rounded px-4 py-2 w-40" id="login" onclick=login() >WAX Login</button>\n')),(0,a.kt)("p",{style:{color:"#ef9d47"},id:"loginresponse"}),(0,a.kt)("p",null,"\xa0"),"**Sign Transaction**",(0,a.kt)("p",null,"Click once you're logged in."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<button class="mt-4 border-black border-solid border-2 rounded px-4 py-2 w-40" id="sign" onclick=sign() >Sign Transaction</button>\n')),(0,a.kt)("code",{id:"response"},"Transaction Response"),(0,a.kt)("h2",{id:"code-examples"},"Code Examples"),(0,a.kt)("p",null,"To use these examples, download and save ",(0,a.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/worldwide-asset-exchange/waxjs/develop/dist-web/waxjs.js"},"WaxJS")," from GitHub."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Simple Login")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const wax = new waxjs.WaxJS({\n    rpcEndpoint: 'https://wax.greymass.com'\n});\n\nautoLogin(); \n\n//checks if autologin is available and calls the normal login function if it is \nasync function autoLogin() { \n    var isAutoLoginAvailable = await wax.isAutoLoginAvailable(); \n    if (isAutoLoginAvailable) { \n        login(); \n    } \n} \n\n//normal login. Triggers a popup for non-whitelisted dapps\nasync function login() { \n    try { \n        const userAccount = await wax.login();  \n    } catch(e) { \n\n    } \n} \n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Complete Demo")),(0,a.kt)("p",null,"To run the demo above, copy the following code to ",(0,a.kt)("strong",{parentName:"p"},"index.html"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<!DOCTYPE html>\n<html>\n<script src='waxjs.js'><\/script>\n\n<body>\n\nBelow is a basic example of WaxJS functionality. To use this demo, click WAX Login (if you're not automatically logged in), then click Sign Transaction.\n\n<strong>Auto-login Feature</strong>\n<p>If your blockchain information displays below, you're automatically logged in to WaxJS, and you don't need to click WAX Login. This eliminates the need for multiple clicks and popups!</p>\n<p style={{color: `#ef9d47`}} id=\"autologin\"></p>\n\n<strong>WAX Login</strong>\n<p>Use this if you're not automatically logged in. Note that if you are auto-logged in, clicking this does not open a popup and the userAccount is still returned.</p>\n<button id=\"login\" onclick=login()>WAX Login</button>\n<p style={{color: `#ef9d47`}} id=\"loginresponse\"></p>\n<p>&amp;nbsp;</p>\n<strong>Sign Transaction</strong>\n<p>Click once you're logged in.</p>\n<button id=\"sign\" onclick=sign()>Sign Transaction</button>\n<pre><code id=\"response\">Transaction Response\n</code></pre>\n\n\n<script>\n    const wax = new waxjs.WaxJS({\n        rpcEndpoint: 'https://wax.greymass.com'\n    });\n\n    //automatically check for credentials\n    autoLogin();\n\n    //checks if autologin is available \n    async function autoLogin() {\n        let isAutoLoginAvailable = await wax.isAutoLoginAvailable();\n        if (isAutoLoginAvailable) {\n            let userAccount = wax.userAccount;\n            let pubKeys = wax.pubKeys;\n            let str = 'AutoLogin enabled for account: ' + userAccount + '<br/>Active: ' + pubKeys[0] + '<br/>Owner: ' + pubKeys[1]\n            document.getElementById('autologin').insertAdjacentHTML('beforeend', str);\n        }\n        else {\n            document.getElementById('autologin').insertAdjacentHTML('beforeend', 'Not auto-logged in');\n        }\n    }\n\n    //normal login. Triggers a popup for non-whitelisted dapps\n    async function login() {\n        try {\n            //if autologged in, this simply returns the userAccount w/no popup\n            let userAccount = await wax.login();\n            let pubKeys = wax.pubKeys;\n            let str = 'Account: ' + userAccount + '<br/>Active: ' + pubKeys[0] + '<br/>Owner: ' + pubKeys[1]\n            document.getElementById('loginresponse').insertAdjacentHTML('beforeend', str);\n        } catch (e) {\n            document.getElementById('loginresponse').append(e.message);\n        }\n    } \n\n    async function sign() {\n    if(!wax.api) {\n        return document.getElementById('response').append('* Login first *');\n    }\n\n    try {\n        const result = await wax.api.transact({\n        actions: [{\n            account: 'eosio',\n            name: 'delegatebw',\n            authorization: [{\n            actor: wax.userAccount,\n            permission: 'active',\n            }],\n            data: {\n            from: wax.userAccount,\n            receiver: wax.userAccount,\n            stake_net_quantity: '0.00000001 WAX',\n            stake_cpu_quantity: '0.00000000 WAX',\n            transfer: false,\n            memo: 'This is a WaxJS/Cloud Wallet Demo.'\n            },\n        }]\n        }, {\n        blocksBehind: 3,\n        expireSeconds: 30\n        });\n        document.getElementById('response').append(JSON.stringify(result, null, 2))\n    } catch(e) {\n        document.getElementById('response').append(e.message);\n    }\n    }\n\n<\/script>\n</body>\n</html>\n\n")))}d.isMDXComponent=!0}}]);