"use strict";(self.webpackChunkwaxdevelopers=self.webpackChunkwaxdevelopers||[]).push([[5117],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>g});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(a),d=n,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||l;return a?r.createElement(g,o(o({ref:t},u),{},{components:a})):r.createElement(g,o({ref:t},u))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:n,o[1]=i;for(var c=2;c<l;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},529:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const l={title:"Test Your WAX RNG Contract",layout:"default",nav_order:86,parent:"Create a WAX RNG Smart Contract",grand_parent:"Tutorials","lang-ref":"Test Your WAX RNG Contract",lang:"en"},o=void 0,i={unversionedId:"tutorials/create-wax-rng-smart-contract/rng_test",id:"tutorials/create-wax-rng-smart-contract/rng_test",title:"Test Your WAX RNG Contract",description:"To test the smart contract we will make a call to action getrnd with the following parameters:",source:"@site/docs/tutorials/create-wax-rng-smart-contract/rng_test.md",sourceDirName:"tutorials/create-wax-rng-smart-contract",slug:"/tutorials/create-wax-rng-smart-contract/rng_test",permalink:"/waxdevelopers_test/docs/tutorials/create-wax-rng-smart-contract/rng_test",draft:!1,editUrl:"https://github.com/3dkrender/waxdevelopers_test/tree/main/docs/tutorials/create-wax-rng-smart-contract/rng_test.md",tags:[],version:"current",frontMatter:{title:"Test Your WAX RNG Contract",layout:"default",nav_order:86,parent:"Create a WAX RNG Smart Contract",grand_parent:"Tutorials","lang-ref":"Test Your WAX RNG Contract",lang:"en"},sidebar:"tutorialSidebar",previous:{title:"Build Your Contract to call WAX RNG contract",permalink:"/waxdevelopers_test/docs/tutorials/create-wax-rng-smart-contract/rng_sample"},next:{title:"Custom Permissions",permalink:"/waxdevelopers_test/docs/tutorials/custom-permissions"}},s={},c=[{value:"Call to action",id:"call-to-action",level:2},{value:"Verify The Random Number",id:"verify-the-random-number",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(p,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"To test the smart contract we will make a call to action ",(0,n.kt)("em",{parentName:"p"},"getrnd")," with the following parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Sample"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"customer_id"),(0,n.kt)("td",{parentName:"tr",align:null},"name"),(0,n.kt)("td",{parentName:"tr",align:null},"arpegiator21"),(0,n.kt)("td",{parentName:"tr",align:null},"Account name of the requesting user")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Note:")," To illustrate the case I use the account ",(0,n.kt)("em",{parentName:"p"},"arpegiator21")," but you should use your own account whose key has already been imported to the wallet and with which you can sign transactions."),(0,n.kt)("h2",{id:"call-to-action"},"Call to action"),(0,n.kt)("p",null,"From the command line, use the ",(0,n.kt)("inlineCode",{parentName:"p"},"cleos push action")," command to call the ",(0,n.kt)("strong",{parentName:"p"},"getrnd")," action."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"cleos -u [chain-api-url] push action mywaxrngtest getrnd '[\"arpegiator21\"]' -p arpegiator21@action\n")),(0,n.kt)("p",null,"The console prints the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'executed transaction: 06847ad5e939849a28f03685a6f959d59fac9ab265b7eeb4453157ab2b0c45a8  104 bytes  310 us\n#  mywaxrngtest <= mywaxrngtest::getrnd         {"customer_id":"arpegiator21"}\n#      orng.wax <= orng.wax::requestrand        {"assoc_id":"2949917703587584469","signing_value":"2949917703587584469","caller":"mywaxrngtest"}\nwarning: transaction executed locally, but may not be confirmed by the network yet         ]\n')),(0,n.kt)("p",null,"In the response we can see how the ",(0,n.kt)("em",{parentName:"p"},"getrnd")," action has made an ",(0,n.kt)("em",{parentName:"p"},"inline")," call to the ",(0,n.kt)("em",{parentName:"p"},"requestrand")," action of the smart contract ",(0,n.kt)("em",{parentName:"p"},"orng.wax")," with the following parameters:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"assoc_id"),(0,n.kt)("td",{parentName:"tr",align:null},"uint64_t"),(0,n.kt)("td",{parentName:"tr",align:null},"2949917703587584469")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"signing_value"),(0,n.kt)("td",{parentName:"tr",align:null},"uint64_t"),(0,n.kt)("td",{parentName:"tr",align:null},"2949917703587584469")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"caller"),(0,n.kt)("td",{parentName:"tr",align:null},"name"),(0,n.kt)("td",{parentName:"tr",align:null},"Name of the smart contract containing the callback function that will receive the response.")))),(0,n.kt)("p",null,"Although we have taken many precautions to generate a unique seed (",(0,n.kt)("em",{parentName:"p"},"signing_value"),"), if it still failed, we would get an error message like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"Error 3050003: eosio_assert_message assertion failure\nError Details:\nassertion failure with message: Signing value already used\npending console output:\n")),(0,n.kt)("h2",{id:"verify-the-random-number"},"Verify The Random Number"),(0,n.kt)("p",null,"The callback function saves your random number to the ",(0,n.kt)("strong",{parentName:"p"},"rngcustomers")," table. To display the table values, use the ",(0,n.kt)("inlineCode",{parentName:"p"},"cleos get table")," command."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"cleos -u [chain-api-url] get table mywaxrngtest mywaxrngtest rngcustomers\n")),(0,n.kt)("p",null,"The console prints the following JSON results, including the ",(0,n.kt)("strong",{parentName:"p"},"random_value")," returned from the WAX RNG service and the ",(0,n.kt)("strong",{parentName:"p"},"finalnumber")," derived from the ",(0,n.kt)("strong",{parentName:"p"},"random_value"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "rows": [{\n      "signing_value": "2949917703587584469",\n      "customer_id": "arpegiator21",\n      "random_value": "b3f4a264cdb0367db071c851b6bbb20b51a391cdb50b314d81f3705c0702c8d4",\n      "final_number": 85\n    }\n  ],\n  "more": false,\n  "next_key": ""\n}\n')))}m.isMDXComponent=!0}}]);