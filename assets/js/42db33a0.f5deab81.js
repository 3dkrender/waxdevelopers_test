"use strict";(self.webpackChunkwaxdevelopers=self.webpackChunkwaxdevelopers||[]).push([[9768],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>f});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(a),d=n,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return a?r.createElement(f,l(l({ref:t},u),{},{components:a})):r.createElement(f,l({ref:t},u))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:n,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1031:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const i={title:"WAX-CDT API",layout:"default",nav_order:25,parent:"WAX API Reference",lang:"en","lang-ref":"WAX-CDT API"},l=void 0,o={unversionedId:"api-reference/cdt_api",id:"api-reference/cdt_api",title:"WAX-CDT API",description:"All of your smart contracts inherit from the C++ API files available in the WAX Contract Development Toolkit (WAX-CDT)library. These files are used to define your smart contract's actions, structures, and data types.",source:"@site/docs/api-reference/cdt_api.md",sourceDirName:"api-reference",slug:"/api-reference/cdt_api",permalink:"/waxdevelopers_test/docs/api-reference/cdt_api",draft:!1,editUrl:"https://github.com/3dkrender/waxdevelopers_test/tree/main/docs/api-reference/cdt_api.md",tags:[],version:"current",frontMatter:{title:"WAX-CDT API",layout:"default",nav_order:25,parent:"WAX API Reference",lang:"en","lang-ref":"WAX-CDT API"},sidebar:"tutorialSidebar",previous:{title:"WAX API Reference",permalink:"/waxdevelopers_test/docs/api-reference/"},next:{title:"dfuse for WAX dApps",permalink:"/waxdevelopers_test/docs/api-reference/dfuse/"}},s={},p=[{value:"WAX API Overloads and Customizations",id:"wax-api-overloads-and-customizations",level:2},{value:"Method Name: verify_rsa_sha256_sig",id:"method-name-verify_rsa_sha256_sig",level:3},{value:"Data Types",id:"data-types",level:2},{value:"Type Definitions",id:"type-definitions",level:2},{value:"Additional Information",id:"additional-information",level:2}],u={toc:p},m="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"All of your smart contracts inherit from the C++ API files available in the ",(0,n.kt)("a",{parentName:"p",href:"/docs/dapp-development/wax-cdt/"},"WAX Contract Development Toolkit (WAX-CDT)"),"library. These files are used to define your smart contract's actions, structures, and data types. "),(0,n.kt)("p",null,"This smart contract API can be grouped into three key modules:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"contracts:")," This is the primary C++ contracts API used for communicating with the WAX Blockchain. This library defines actions, dispatchers, permissions, and more. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"core:")," This library handles datastreams, the ",(0,n.kt)("strong",{parentName:"li"},"name")," datatype, serialization objects, and more. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"types:")," This library defines the base contract, data layouts, data structures, and more. ")),(0,n.kt)("p",null,"All of these libraries are located in the ",(0,n.kt)("strong",{parentName:"p"},"wax-cdt/libraries/eosiolib")," folder. Most of this functionality is available once you include ",(0,n.kt)("strong",{parentName:"p"},"<eosio/eosio.hpp>")," in your smart contract. It's recommended that you review these files to help you understand how a smart contract is constructed."),(0,n.kt)("h2",{id:"wax-api-overloads-and-customizations"},"WAX API Overloads and Customizations"),(0,n.kt)("h3",{id:"method-name-verify_rsa_sha256_sig"},"Method Name: verify_rsa_sha256_sig"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Source Code:")," ",(0,n.kt)("a",{href:"https://github.com/worldwide-asset-exchange/wax-cdt/blob/master/libraries/eosiolib/core/eosio/crypto.hpp#L283",target:"_blank"},"WAX GitHub Repository")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Description:")," Verify a signature using the RSA 256 algorithm. Implemented in native code, this method is about 15x's faster than standard WASM verification. Refer to ",(0,n.kt)("a",{href:"https://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf",target:"_blank"},"RSA Cryptography Standard")," for more information."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Input Parameters:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"message"),(0,n.kt)("td",{parentName:"tr",align:null},"Message buffer to verify.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"message_len"),(0,n.kt)("td",{parentName:"tr",align:null},"Message buffer length.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"signature"),(0,n.kt)("td",{parentName:"tr",align:null},"Signature as hex string.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"exponent"),(0,n.kt)("td",{parentName:"tr",align:null},"Public key exponent as hex string.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"modulus"),(0,n.kt)("td",{parentName:"tr",align:null},"Modulus as hex string (a leading zero is not allowed).")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example Usage:")," This method is used to in our WAX RNG service to verify that the RSA signature (random value) returned from the WAX RNG oracle is valid."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},' eosio_assert(verify_rsa_sha256_sig(&signing_value, sizeof(signing_value), \n    random_value, pub_key->exponent, pub_key->modulus),\n    "Could not verify signature.");\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Return Value:")," Boolean. True if the verification succeeds, False if not."),(0,n.kt)("h2",{id:"data-types"},"Data Types"),(0,n.kt)("p",null,"Your smart contracts can use the following data types:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"bool"),(0,n.kt)("li",{parentName:"ul"},"string"),(0,n.kt)("li",{parentName:"ul"},"int8"),(0,n.kt)("li",{parentName:"ul"},"int16"),(0,n.kt)("li",{parentName:"ul"},"int32"),(0,n.kt)("li",{parentName:"ul"},"int64"),(0,n.kt)("li",{parentName:"ul"},"int128"),(0,n.kt)("li",{parentName:"ul"},"uint8"),(0,n.kt)("li",{parentName:"ul"},"uint16"),(0,n.kt)("li",{parentName:"ul"},"uint32"),(0,n.kt)("li",{parentName:"ul"},"uint64"),(0,n.kt)("li",{parentName:"ul"},"uint128"),(0,n.kt)("li",{parentName:"ul"},"varint32"),(0,n.kt)("li",{parentName:"ul"},"varuint32"),(0,n.kt)("li",{parentName:"ul"},"float32"),(0,n.kt)("li",{parentName:"ul"},"float64"),(0,n.kt)("li",{parentName:"ul"},"float128"),(0,n.kt)("li",{parentName:"ul"},"time_point"),(0,n.kt)("li",{parentName:"ul"},"time_point_sec"),(0,n.kt)("li",{parentName:"ul"},"block_timestamp_type"),(0,n.kt)("li",{parentName:"ul"},"bytes"),(0,n.kt)("li",{parentName:"ul"},"checksum160"),(0,n.kt)("li",{parentName:"ul"},"checksum256"),(0,n.kt)("li",{parentName:"ul"},"checksum512"),(0,n.kt)("li",{parentName:"ul"},"name"),(0,n.kt)("li",{parentName:"ul"},"public_key"),(0,n.kt)("li",{parentName:"ul"},"private_key"),(0,n.kt)("li",{parentName:"ul"},"signature"),(0,n.kt)("li",{parentName:"ul"},"symbol"),(0,n.kt)("li",{parentName:"ul"},"symbol_code"),(0,n.kt)("li",{parentName:"ul"},"asset")),(0,n.kt)("p",null,"Refer to EOSIO's ",(0,n.kt)("a",{href:"https://eosio.github.io/eosio.cdt/1.6.0/group__types.html",target:"_blank"},"Types")," for more information."),(0,n.kt)("h2",{id:"type-definitions"},"Type Definitions"),(0,n.kt)("p",null,"WAX-CDT also includes a custom library of type definitions:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"typedef uint64_t account_name;"),(0,n.kt)("li",{parentName:"ul"},"typedef uint64_t action_name;"),(0,n.kt)("li",{parentName:"ul"},"typedef uint64_t permission_name;"),(0,n.kt)("li",{parentName:"ul"},"typedef uint64_t scope_name;"),(0,n.kt)("li",{parentName:"ul"},"typedef uint64_t table_name;"),(0,n.kt)("li",{parentName:"ul"},"typedef uint32_t time;"),(0,n.kt)("li",{parentName:"ul"},"typedef uint16_t weight_type;"),(0,n.kt)("li",{parentName:"ul"},"typedef struct checksum256 transaction_id_type;"),(0,n.kt)("li",{parentName:"ul"},"typedef struct checksum256 block_id_type;")),(0,n.kt)("h2",{id:"additional-information"},"Additional Information"),(0,n.kt)("p",null,"For a complete list of features available from the smart contract C++ API, refer to EOSIO's ",(0,n.kt)("a",{href:"https://eosio.github.io/eosio.cdt",target:"_blank"},"C/C++ API"),"."))}c.isMDXComponent=!0}}]);