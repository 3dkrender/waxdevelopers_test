"use strict";(self.webpackChunkwaxdevelopers=self.webpackChunkwaxdevelopers||[]).push([[5800],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(t),f=r,m=c["".concat(p,".").concat(f)]||c[f]||d[f]||i;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=f;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6317:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const i={title:"dfuse Example",layout:"default",nav_order:121,parent:"dfuse for WAX dApps",grand_parent:"WAX API Reference","lang-ref":"dfuse Example",lang:"en"},o=void 0,s={unversionedId:"api-reference/dfuse/dfuse_example",id:"api-reference/dfuse/dfuse_example",title:"dfuse Example",description:"In this example, we'll sign up for a free account and get the WAX RNG abi using dfuse REST.",source:"@site/docs/api-reference/dfuse/dfuse_example.md",sourceDirName:"api-reference/dfuse",slug:"/api-reference/dfuse/dfuse_example",permalink:"/waxdevelopers_test/docs/api-reference/dfuse/dfuse_example",draft:!1,editUrl:"https://github.com/3dkrender/waxdevelopers_test/tree/main/docs/api-reference/dfuse/dfuse_example.md",tags:[],version:"current",frontMatter:{title:"dfuse Example",layout:"default",nav_order:121,parent:"dfuse for WAX dApps",grand_parent:"WAX API Reference","lang-ref":"dfuse Example",lang:"en"},sidebar:"tutorialSidebar",previous:{title:"dfuse for WAX dApps",permalink:"/waxdevelopers_test/docs/api-reference/dfuse/"},next:{title:"WAX-RPC API",permalink:"/waxdevelopers_test/docs/api-reference/rpc_api"}},p={},l=[],u={toc:l},c="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this example, we'll sign up for a free account and get the WAX RNG abi using dfuse REST. "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Sign up for a ",(0,r.kt)("a",{href:"https://dfuse.eosnation.io/",target:"_blank"},"free dfuse account"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click Create New Key.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Get a short-lived JWT using your API key."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"```\ncurl -X POST \\\n")),(0,r.kt)("p",{parentName:"li"},"  ",(0,r.kt)("a",{parentName:"p",href:"https://auth.eosnation.io/v1/auth/issue"},"https://auth.eosnation.io/v1/auth/issue")," \\\n-H 'Content-Type: application/json' \\\n-H 'cache-control: no-cache' \\\n-d '{\n\"api_key\": \"server_00d11abcd7e68f999d850c8efc6ab99\"\n}'"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\n4. Use the `abi` endpoint to get the WAX RNG smart contract endpoint. In the Header, set the Authorization to Bearer and use your JWT from the previous step.\n\n    ```\n    curl -X GET \\\n      \'https://wax.dfuse.eosnation.io/v0/state/abi?account=orng.wax&json=true\' \\\n      -H \'Authorization: Bearer Your.JWT.Token\' \\\n      -H \'cache-control: no-cache\'\n    ```\n\n    ### Example Response\n\n    ```json\n    {\n    "block_num": 9135393,\n    "account": "orng.wax",\n    "abi": {\n        "version": "eosio::abi/1.1",\n        "structs": [\n            {\n                "name": "config_a",\n                "base": "",\n                "fields": [\n                    {\n                        "name": "name",\n                        "type": "uint64"\n                    },\n                    {\n                        "name": "value",\n                        "type": "int64"\n                    }\n                ]\n            },\n            {\n                "name": "jobs_a",\n                "base": "",\n                "fields": [\n                    {\n                        "name": "id",\n                        "type": "uint64"\n                    },\n                    {\n                        "name": "assoc_id",\n                        "type": "uint64"\n                    },\n                    {\n                        "name": "signing_value",\n                        "type": "uint64"\n                    },\n                    {\n                        "name": "caller",\n                        "type": "name"\n                    }\n                ]\n            },\n            {\n                "name": "killjobs",\n                "base": "",\n                "fields": [\n                    {\n                        "name": "job_ids",\n                        "type": "uint64[]"\n                    }\n                ]\n            },\n            {\n                "name": "pause",\n                "base": "",\n                "fields": [\n                    {\n                        "name": "paused",\n                        "type": "bool"\n                    }\n                ]\n            },\n            {\n                "name": "requestrand",\n                "base": "",\n                "fields": [\n                    {\n                        "name": "assoc_id",\n                        "type": "uint64"\n                    },\n                    {\n                        "name": "signing_value",\n                        "type": "uint64"\n                    },\n                    {\n                        "name": "caller",\n                        "type": "name"\n                    }\n                ]\n            },\n            {\n                "name": "setrand",\n                "base": "",\n                "fields": [\n                    {\n                        "name": "job_id",\n                        "type": "uint64"\n                    },\n                    {\n                        "name": "random_value",\n                        "type": "string"\n                    }\n                ]\n            },\n            {\n                "name": "setsigpubkey",\n                "base": "",\n                "fields": [\n                    {\n                        "name": "exponent",\n                        "type": "string"\n                    },\n                    {\n                        "name": "modulus",\n                        "type": "string"\n                    }\n                ]\n            },\n            {\n                "name": "signvals_a",\n                "base": "",\n                "fields": [\n                    {\n                        "name": "signing_value",\n                        "type": "uint64"\n                    }\n                ]\n            },\n            {\n                "name": "sigpubkey_a",\n                "base": "",\n                "fields": [\n                    {\n                        "name": "id",\n                        "type": "uint64"\n                    },\n                    {\n                        "name": "exponent",\n                        "type": "string"\n                    },\n                    {\n                        "name": "modulus",\n                        "type": "string"\n                    }\n                ]\n            },\n            {\n                "name": "version",\n                "base": ""\n            }\n        ],\n        "actions": [\n            {\n                "name": "killjobs",\n                "type": "killjobs",\n                "ricardian_contract": ""\n            },\n            {\n                "name": "pause",\n                "type": "pause",\n                "ricardian_contract": ""\n            },\n            {\n                "name": "requestrand",\n                "type": "requestrand",\n                "ricardian_contract": ""\n            },\n            {\n                "name": "setrand",\n                "type": "setrand",\n                "ricardian_contract": ""\n            },\n            {\n                "name": "setsigpubkey",\n                "type": "setsigpubkey",\n                "ricardian_contract": ""\n            },\n            {\n                "name": "version",\n                "type": "version",\n                "ricardian_contract": ""\n            }\n        ],\n        "tables": [\n            {\n                "name": "config.a",\n                "index_type": "i64",\n                "type": "config_a"\n            },\n            {\n                "name": "jobs.a",\n                "index_type": "i64",\n                "type": "jobs_a"\n            },\n            {\n                "name": "signvals.a",\n                "index_type": "i64",\n                "type": "signvals_a"\n            },\n            {\n                "name": "sigpubkey.a",\n                "index_type": "i64",\n                "type": "sigpubkey_a"\n            }\n        ]\n    }\n}\n')))}d.isMDXComponent=!0}}]);