"use strict";(self.webpackChunkwaxdevelopers=self.webpackChunkwaxdevelopers||[]).push([[154],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(r),u=o,f=d["".concat(p,".").concat(u)]||d[u]||m[u]||a;return r?n.createElement(f,l(l({ref:t},s),{},{components:r})):n.createElement(f,l({ref:t},s))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6503:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={title:"WAX-CDT Sample Contracts",layout:"default",nav_order:52,parent:"WAX Contract Development Toolkit",grand_parent:"dApp Development","lang-ref":"WAX-CDT Sample Contracts",lang:"en"},l=void 0,i={unversionedId:"dapp-development/wax-cdt/cdt_use",id:"dapp-development/wax-cdt/cdt_use",title:"WAX-CDT Sample Contracts",description:"WAX-CDT provides a wax-cdt/examples directory that includes the following sample smart contracts:",source:"@site/docs/dapp-development/wax-cdt/cdt_use.md",sourceDirName:"dapp-development/wax-cdt",slug:"/dapp-development/wax-cdt/cdt_use",permalink:"/waxdevelopers_test/docs/dapp-development/wax-cdt/cdt_use",draft:!1,editUrl:"https://github.com/3dkrender/waxdeveloper_test/tree/main/docs/dapp-development/wax-cdt/cdt_use.md",tags:[],version:"current",frontMatter:{title:"WAX-CDT Sample Contracts",layout:"default",nav_order:52,parent:"WAX Contract Development Toolkit",grand_parent:"dApp Development","lang-ref":"WAX-CDT Sample Contracts",lang:"en"},sidebar:"tutorialSidebar",previous:{title:"Install WAX-CDT",permalink:"/waxdevelopers_test/docs/dapp-development/wax-cdt/cdt_install"},next:{title:"wax-testnet-quickstart",permalink:"/waxdevelopers_test/docs/dapp-development/wax-testnet-quickstart"}},p={},c=[{value:"Compile Hello World",id:"compile-hello-world",level:2}],s={toc:c},d="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"WAX-CDT provides a ",(0,o.kt)("strong",{parentName:"p"},"wax-cdt/examples")," directory that includes the following sample smart contracts:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Hello World"),(0,o.kt)("li",{parentName:"ul"},"multi_index Example"),(0,o.kt)("li",{parentName:"ul"},"Inline Transaction Example")),(0,o.kt)("p",null,"Each project includes two ",(0,o.kt)("strong",{parentName:"p"},"CMakeLists.txt")," files: one in the project's root directory, and the other in the projects ",(0,o.kt)("strong",{parentName:"p"},"src")," directory. You can use these files to automatically generate WASM and ABI files for the sample projects."),(0,o.kt)("p",null,"In this tutorial, you'll learn how to use the ",(0,o.kt)("strong",{parentName:"p"},"make")," scripts to build the Hello World example."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("strong",null,"Note:")," These samples were created with **eosio-init** (part of the [WAX-CDT Options](/docs/tools/cdt_options) suite of tools). Refer to [Create a Smart Contract](/docs/dapp-development/wax-cdt/cdt_use.html#compile-hello-world) to customize these scripts for your smart contracts."),(0,o.kt)("h2",{id:"compile-hello-world"},"Compile Hello World"),(0,o.kt)("p",null,"To compile the Hello World example:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"From the command line, navigate to ",(0,o.kt)("strong",{parentName:"p"},"wax-cdt/examples/hello"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cd wax-cdt/examples/hello\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a ",(0,o.kt)("strong",{parentName:"p"},"build")," directory."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir build\n")),(0,o.kt)("admonition",{parentName:"li",type:"note"},(0,o.kt)("strong",null,"Note:")," By default, ",(0,o.kt)("strong",null,"eosio-init")," creates a build directory. Because this directory is empty, it's not uploaded to Git. If you use ",(0,o.kt)("strong",null,"eosio-init")," to [Create a Smart Contract](/docs/dapp-development/wax-cdt/cdt_use.html#compile-hello-world), you'll be able to skip this step. ")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Navigate to the ",(0,o.kt)("strong",{parentName:"p"},"build")," directory."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cd build\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Initialize cmake from the ",(0,o.kt)("strong",{parentName:"p"},"wax-cdt/examples/hello")," directory to write the necessary build files to the ",(0,o.kt)("strong",{parentName:"p"},"build")," directory."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cmake ..\n")),(0,o.kt)("p",{parentName:"li"},"The console prints the following build tasks:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'-- The C compiler identification is GNU 7.4.0\n-- The CXX compiler identification is GNU 7.4.0\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Setting up Eosio Wasm Toolchain 1.6.1 at /usr/local/eosio.cdt\nCMake Warning (dev) in CMakeLists.txt:\n  No cmake_minimum_required command is present.  A line of code such as\n\n    cmake_minimum_required(VERSION 3.10)\n\n  should be added at the top of the file.  The version specified may be lower\n  if you wish to support older CMake versions for this project.  For more\n  information run "cmake --help-policy CMP0000".\nThis warning is for project developers.  Use -Wno-dev to suppress it.\n\n-- Configuring done\n-- Generating done\n-- Build files have been written to: waxblockchain/wax-blockchain/wax-cdt/examples/hello/build\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Build the scripts."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"make\n")),(0,o.kt)("p",{parentName:"li"},"The console prints the following confirmation:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"[  5%] Performing build step for 'hello_project'\n[100%] Built target hello\n[ 11%] No install step for 'hello_project'\n[ 16%] No test step for 'hello_project'\n[ 22%] Completed 'hello_project'\n[ 50%] Built target hello_project\n[ 55%] Performing configure step for 'hello_tests_project'\n")))),(0,o.kt)("p",null,"You should now be able to locate the ",(0,o.kt)("strong",{parentName:"p"},"hello.wasm")," and ",(0,o.kt)("strong",{parentName:"p"},"hello.abi")," files in the ",(0,o.kt)("strong",{parentName:"p"},"build/hello")," directory. "))}m.isMDXComponent=!0}}]);