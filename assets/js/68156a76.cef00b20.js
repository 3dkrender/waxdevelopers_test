"use strict";(self.webpackChunkwaxdevelopers=self.webpackChunkwaxdevelopers||[]).push([[3112],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(a),u=r,k=m["".concat(c,".").concat(u)]||m[u]||d[u]||o;return a?n.createElement(k,i(i({ref:t},s),{},{components:a})):n.createElement(k,i({ref:t},s))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1314:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={title:"Create a Smart Contract",layout:"default",nav_order:62,parent:"Smart Contract Quickstart",grand_parent:"dApp Development","lang-ref":"Create a Smart Contract",lang:"en"},i="Create a Smart Contract",l={unversionedId:"dapp-development/smart-contract-quickstart/dapp_hello_world",id:"dapp-development/smart-contract-quickstart/dapp_hello_world",title:"Create a Smart Contract",description:"In this section, you'll learn how to write and compile a WAX smart contract using eosio-init.",source:"@site/docs/dapp-development/smart-contract-quickstart/dapp_hello_world.md",sourceDirName:"dapp-development/smart-contract-quickstart",slug:"/dapp-development/smart-contract-quickstart/dapp_hello_world",permalink:"/waxdevelopers_test/docs/dapp-development/smart-contract-quickstart/dapp_hello_world",draft:!1,editUrl:"https://github.com/3dkrender/waxdeveloper_test/tree/main/docs/dapp-development/smart-contract-quickstart/dapp_hello_world.md",tags:[],version:"current",frontMatter:{title:"Create a Smart Contract",layout:"default",nav_order:62,parent:"Smart Contract Quickstart",grand_parent:"dApp Development","lang-ref":"Create a Smart Contract",lang:"en"},sidebar:"tutorialSidebar",previous:{title:"Deploy to Your Blockchain",permalink:"/waxdevelopers_test/docs/dapp-development/smart-contract-quickstart/dapp_dev_deploy"},next:{title:"Smart Contract Basics",permalink:"/waxdevelopers_test/docs/dapp-development/smart-contract-quickstart/smart_contract_basics"}},c={},p=[{value:"How it Works",id:"how-it-works",level:2},{value:"Use eosio-init",id:"use-eosio-init",level:2},{value:"Compile Your Contract",id:"compile-your-contract",level:2}],s={toc:p},m="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-a-smart-contract"},"Create a Smart Contract"),(0,r.kt)("p",null,"In this section, you'll learn how to write and compile a WAX smart contract using ",(0,r.kt)("strong",{parentName:"p"},"eosio-init"),"."),(0,r.kt)("h2",{id:"how-it-works"},"How it Works"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"eosio-init")," is a WAX-CDT tool that creates the following smart contract template/directory structure:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"include")," folder: This includes a sample ",(0,r.kt)("strong",{parentName:"li"},".hpp")," file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ricardian")," folder: This includes a sample Ricardian contract markdown file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"src")," folder: This includes a sample ",(0,r.kt)("strong",{parentName:"li"},".cpp")," smart contract file.")),(0,r.kt)("p",null,"The template files are named after the project name you specify when you use ",(0,r.kt)("strong",{parentName:"p"},"eosio-init")," from the command line. "),(0,r.kt)("h2",{id:"use-eosio-init"},"Use eosio-init"),(0,r.kt)("p",null,"To create your first WAX smart contract using ",(0,r.kt)("strong",{parentName:"p"},"eosio-init"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a smart contracts directory. For this tutorial, we'll use a folder named ",(0,r.kt)("strong",{parentName:"p"},"mycontracts"),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir mycontracts\n```shell\nNavigate to this new directory:\n```shell\ncd mycontracts\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"From the command line, use ",(0,r.kt)("strong",{parentName:"p"},"eosio-init")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"-project")," parameter."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"eosio-init -project wax\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"eosio-init")," uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"-project")," name to create the following directory structure:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"mycontracts/wax/include "),(0,r.kt)("li",{parentName:"ul"},"mycontracts/wax/ricardian "),(0,r.kt)("li",{parentName:"ul"},"mycontracts/wax/src "))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Optional. Add a ",(0,r.kt)("a",{parentName:"p",href:"/docs/tools/ricardian_clause"},"Ricardian Clause"),". A  ",(0,r.kt)("a",{parentName:"p",href:"/docs/tools/ricardian_contract"},"Ricardian Contract")," is already included by default."))),(0,r.kt)("p",null,"You should now have a smart contract template, including a sample smart contract (mycontracts/wax/src/wax.cpp). This contract includes the following action:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'#include <wax.hpp>\nACTION wax::hi( name nm ) {\n   /* fill in action body */\n   print_f("Name : %\\n",nm);\n}\n')),(0,r.kt)("p",null,"The header file (mycontracts/wax/include/wax.hpp) inherits from ",(0,r.kt)("strong",{parentName:"p"},"<eosio/eosio.hpp>"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Inherit your contract from eosio::contract. \n// This exposes the following data types (available to your smart contract):\n// eosio::name receiver - the contract that receives an action (this contract)\n// eosio::name code - the contract's blockchain account\n// eosio::datastream - the data that's passed to the contract. In this example, it's  your name.\n#include <eosio/eosio.hpp>\nusing namespace eosio;\n\nCONTRACT wax : public contract {\n   public:\n      using contract::contract;\n\n      // The ACTION keyword implements the behavior of your contract. \n      // ACTION is a shortcut for [[eosio::action]]  \n      ACTION hi( name nm );\n\n      //action_wrapper: first parameter = action to call\n      //second parameter = pointer to the action function\n      using hi_action = action_wrapper<\"hi\"_n, &wax::hi>;\n};\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("strong",null,"Tip:")," The action_wrapper struct creates a template/pointer based off of a specific action. You can use action_wrappers to make action calls from one contract to another. "),(0,r.kt)("h2",{id:"compile-your-contract"},"Compile Your Contract"),(0,r.kt)("p",null,"To deploy your smart contract, you'll need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},".wasm")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".abi")," file. You can do this using the WAX Contract Development Toolkit (WAX-CDT)."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install ",(0,r.kt)("a",{parentName:"p",href:"/docs/dapp-development/wax-cdt/"},"WAX-CDT")," (if you haven't done so already).")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"From the command line, navigate to the ",(0,r.kt)("strong",{parentName:"p"},"mycontracts/wax")," build folder."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cd wax/build\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Initialize cmake to write the necessary build files to the ",(0,r.kt)("strong",{parentName:"p"},"build")," directory."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cmake ..\n")),(0,r.kt)("p",{parentName:"li"},"The console prints the following build tasks:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"-- The C compiler identification is GNU 7.4.0\n-- The CXX compiler identification is GNU 7.4.0\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n...\n-- Build files have been written to: waxblockchain/wax-blockchain/wax-cdt/examples/hello/build\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Build the scripts."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"make\n")),(0,r.kt)("p",{parentName:"li"},"The console prints the following confirmation:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"Scanning dependencies of target wax\n[ 50%] Building CXX object CMakeFiles/wax.dir/wax.obj\nWarning, empty ricardian clause file\n[100%] Linking CXX executable wax.wasm\n[100%] Built target wax\n[ 77%] No install step for 'wax_project'\n[ 88%] No test step for 'wax_project'\n[100%] Completed 'wax_project'\n[100%] Built target wax_project\n")))),(0,r.kt)("p",null,"You can locate the ",(0,r.kt)("strong",{parentName:"p"},"wax.wasm")," and ",(0,r.kt)("strong",{parentName:"p"},"wax.abi")," files in the ",(0,r.kt)("strong",{parentName:"p"},"build/wax")," directory."))}d.isMDXComponent=!0}}]);